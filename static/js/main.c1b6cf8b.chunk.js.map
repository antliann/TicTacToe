{"version":3,"sources":["menu.js","board.js","algorithm.js","index.js"],"names":["LeftBoard","xSmall","className","width","height","viewBox","fill","xmlns","y","rx","transform","x","oSmall","fillRule","clipRule","d","button1","this","props","id","onClick","changeFirst","button2","easy","hardMode","changeMode","hard","refreshIcon","newGame","React","Component","Square","drawX","strokeWidth","strokeLinecap","strokeDasharray","strokeDashoffset","drawO","cx","cy","r","value","keyName","Board","i","squares","result","row","thisRow","col","push","renderSquare","calculateWinner","lines","length","a","b","c","fillThreeInARow","player","removeFilled","possibleMoves","counter","splice","botMind","history","slice","filledSquares","user","compulsiveMove","properCell","Math","abs","lastMove","hardModeAlgorithm","floor","random","Game","state","Array","stepNumber","xIsNext","firstIsO","setState","concat","handleClick","setTimeout","botMove","step","winner","X","O","current","moves","map","move","desc","jumpTo","userClick","defineStatus","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1b6cf8b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nexport default class LeftBoard extends React.Component {\r\n    render() {\r\n        const xSmall = <svg className='little-signs x' width=\"28\" height=\"28\" viewBox=\"0 0 28 28\"\r\n                            fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <rect y=\"2.47481\" width=\"3.49991\" height=\"35.9991\" rx=\"1.74996\"\r\n                  transform=\"rotate(-45 0 2.47481)\" fill=\"#CF0000\"/>\r\n            <rect x=\"25.4552\" width=\"3.49991\" height=\"35.9991\" rx=\"1.74996\" transform=\"rotate(45 25.4552 0)\"\r\n                  fill=\"#CF0000\"/>\r\n        </svg>;\r\n\r\n        const oSmall = <svg className='little-signs o' width=\"29\" height=\"29\" viewBox=\"0 0 29 29\"\r\n                            fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path fillRule=\"evenodd\" clipRule=\"evenodd\"\r\n                  d=\"M14.5 29C22.5081 29 29 22.5081 29 14.5C29 6.49187 22.5081 0 14.5 0C6.49187 0 0 6.49187 0 14.5C0\r\n                  22.5081 6.49187 29 14.5 29ZM14.5 25.5C20.5751 25.5 25.5 20.5751 25.5 14.5C25.5 8.42487 20.5751 3.5\r\n                  14.5 3.5C8.42487 3.5 3.5 8.42487 3.5 14.5C3.5 20.5751 8.42487 25.5 14.5 25.5Z\"\r\n                  fill=\"#00B533\"/>\r\n        </svg>;\r\n\r\n        let button1 = this.props[\"firstIsO\"] ?\r\n            <button id='X' className='x-b' onClick={this.props.changeFirst}>{xSmall} &emsp;&emsp; Moves first</button> :\r\n            <button id='X-now' className='x-b selected'>{xSmall} &emsp;&emsp; Moves first</button>;\r\n\r\n        let button2 = this.props[\"firstIsO\"] ?\r\n            <button id='O-now' className='x-b selected'> {oSmall} &emsp;&emsp; Moves second</button> :\r\n            <button id='O' className='x-b' onClick={this.props.changeFirst}>{oSmall} &emsp;&emsp; Moves second</button>;\r\n\r\n        let easy = this.props.hardMode ?\r\n            <button className='mode' onClick={this.props.changeMode}>Easy</button> :\r\n            <button className='mode selected'>Easy</button>;\r\n        let hard = this.props.hardMode ?\r\n            <button className='mode selected'>Hard</button> :\r\n            <button className='mode' onClick={this.props.changeMode}>Hard</button>;\r\n\r\n        const refreshIcon = <svg className='refresh' width=\"26\" height=\"26\" viewBox=\"0 0 26 26\" fill=\"none\"\r\n                                 xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M24.4055 11.9641C23.8316 11.9641 23.3695 12.4262 23.3695 13C23.3695 18.718 18.718 23.3695 13\r\n                23.3695C7.28203 23.3695 2.63047 18.718 2.63047 13C2.63047 7.28203 7.28203 2.63047 13 2.63047C16.123\r\n                2.63047 19.0176 4.00664 20.9777 6.37305H17.3977C16.8238 6.37305 16.3617 6.83516 16.3617 7.40898C16.3617\r\n                7.98281 16.8238 8.44492 17.3977 8.44492H23.2172C23.791 8.44492 24.2531 7.98281 24.2531\r\n                7.40898V1.59453C24.2531 1.0207 23.791 0.558594 23.2172 0.558594C22.6434 0.558594 22.1812 1.0207\r\n                22.1812 1.59453V4.59063C19.8402 2.03633 16.5445 0.558594 13 0.558594C6.13945 0.558594 0.558594\r\n                6.13945 0.558594 13C0.558594 19.8605 6.13945 25.4414 13 25.4414C19.8605 25.4414 25.4414 19.8605\r\n                25.4414 13C25.4414 12.4262 24.9793 11.9641 24.4055 11.9641Z\" fill=\"white\"/>\r\n        </svg>;\r\n\r\n        return (\r\n            <div className=\"left\">\r\n                <h2 className='l1'>Play as:</h2>\r\n                {button1}\r\n                {button2}\r\n                <h2 className='l2'>Game mode</h2>\r\n                {easy}\r\n                {hard}\r\n                <button className='new-game' onClick={this.props.newGame}>\r\n                    {refreshIcon}\r\n                    New game\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nfunction Square(props) {\r\n    const drawX = <svg className=\"x-draw\" width=\"56\" height=\"56\" viewBox=\"0 0 56 56\" fill=\"none\"\r\n                       xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M 5 5 L 51 51\" fill=\"none\" strokeWidth=\"7\" strokeLinecap=\"round\"\r\n              strokeDasharray=\"100\" strokeDashoffset=\"100\"/>\r\n        <path d=\"M 51 5 L 5 51\" fill=\"none\" strokeWidth=\"7\" strokeLinecap=\"round\"\r\n              strokeDasharray=\"100\" strokeDashoffset=\"100\"/>\r\n    </svg>;\r\n\r\n    const drawO = <svg className=\"o-draw\" width=\"58\" height=\"58\" viewBox=\"0 0 58 58\" fill=\"none\"\r\n                       xmlns=\"http://www.w3.org/2000/svg\">\r\n        <circle cx=\"29\" cy=\"29\" r=\"25\" fill=\"none\" strokeWidth=\"7\" strokeDasharray=\"200\"\r\n                strokeDashoffset=\"200\" strokeLinecap=\"round\"/>\r\n    </svg>;\r\n\r\n    return (\r\n        <button\r\n            className=\"square\"\r\n            onClick={props.onClick}\r\n            key={props.keyName}\r\n        >\r\n            {props.value === 'X' ? drawX : props.value === 'O' ? drawO : null}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default class Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (<Square\r\n            keyName={'square' + i}\r\n            value={this.props.squares[i]}\r\n            onClick={() => this.props.onClick(i)}\r\n        />);\r\n    }\r\n\r\n    render() {\r\n        let result = [];\r\n        for (let row = 0; row < 3; row++) {\r\n            let thisRow = [];\r\n            for (let col = 0; col < 3; col++) {\r\n                thisRow.push(this.renderSquare(row * 3 + col));\r\n            }\r\n            result.push(<div className=\"board-row\"> {thisRow} </div>);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","export function calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction fillThreeInARow(squares, player) {\r\n    for (let i = 0; i < squares.length; i++) {\r\n        if (!squares[i]) {\r\n            squares[i] = player;\r\n            if (calculateWinner(squares) === player) {\r\n                squares[i] = null;\r\n                return i;\r\n            }\r\n            squares[i] = null;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction removeFilled(possibleMoves, squares) {\r\n    let counter = 0;\r\n    for (let i = 0; i < possibleMoves.length + counter; i++) {\r\n        if (squares[possibleMoves[i - counter]]) {\r\n            possibleMoves.splice(i - counter, 1);\r\n            counter++;\r\n        }\r\n    }\r\n}\r\n\r\nfunction lastMove(history) {\r\n    for (let i = 0; i < 9; i++) {\r\n        if (history[history.length - 1].squares[i] !== history[history.length - 2].squares[i]) {\r\n            return i;\r\n        }\r\n    }\r\n}\r\n\r\nfunction hardModeAlgorithm(squares, history) {\r\n    if (!squares[4]) return [4];\r\n\r\n    let possibleMoves;\r\n    let properCell = Math.abs(lastMove(history) - 8);\r\n\r\n    if (properCell === 2 || properCell === 6)\r\n        possibleMoves = [properCell - 1, properCell + 1];\r\n    else if (properCell === 3)\r\n        possibleMoves = [0, 6];\r\n    else if (properCell === 5)\r\n        possibleMoves = [2, 8];\r\n    else possibleMoves = [properCell];\r\n\r\n    removeFilled(possibleMoves, squares);\r\n\r\n    if (possibleMoves.length === 0 || properCell === 4) {\r\n        possibleMoves = [0, 2, 6, 8];\r\n        removeFilled(possibleMoves, squares);\r\n    }\r\n    return possibleMoves;\r\n}\r\n\r\nexport function botMind(history, hardMode) {\r\n    let squares = history[history.length - 1].squares.slice();\r\n    let filledSquares = 0;\r\n    for (let i = 0; i < squares.length; i++) {\r\n        if (squares[i]) filledSquares++;\r\n    }\r\n    let bot = (filledSquares % 2 === 0) ? 'X' : 'O';\r\n    let user = (filledSquares % 2 === 0) ? 'O' : 'X';\r\n\r\n    // First compulsive rule\r\n    let compulsiveMove = fillThreeInARow(squares, bot);\r\n    if (compulsiveMove) return compulsiveMove;\r\n\r\n    // Second compulsive rule\r\n    compulsiveMove = fillThreeInARow(squares, user);\r\n    if (compulsiveMove) return compulsiveMove;\r\n\r\n    let possibleMoves = hardMode ? hardModeAlgorithm(squares, history) : [];\r\n\r\n    if (possibleMoves.length === 0) {\r\n        for (let i = 0; i < squares.length; i++) {\r\n            if (!squares[i]) possibleMoves.push(i);\r\n        }\r\n    }\r\n    return possibleMoves[Math.floor(Math.random() * (possibleMoves.length))];\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport LeftMenu from './menu';\r\nimport Board from './board';\r\nimport {calculateWinner, botMind} from './algorithm';\r\nimport './index.css';\r\nimport './animation.css';\r\n\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            firstIsO: false,\r\n            hardMode: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || (squares[i])) {\r\n            return false;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n        return true;\r\n    }\r\n\r\n    botMove() {\r\n        this.handleClick(botMind(this.state.history, this.state.hardMode));\r\n    }\r\n\r\n    userClick(i) {\r\n        if (this.handleClick(i))\r\n            setTimeout(() => this.botMove(), 400);\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n        if (!step) {\r\n            this.setState({\r\n                history: [{\r\n                    squares: Array(9).fill(null),\r\n                }],\r\n            }, () => {\r\n                if (this.state[\"firstIsO\"]) this.botMove()\r\n            });\r\n        }\r\n    }\r\n\r\n    defineStatus(winner) {\r\n        const X = <svg className='little-sign' width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\"\r\n                       xmlns=\"http://www.w3.org/2000/svg\">\r\n            <rect y=\"2.47481\" width=\"3.49991\" height=\"35.9991\" rx=\"1.74996\" transform=\"rotate(-45 0 2.47481)\"\r\n                  fill=\"#CF0000\"/>\r\n            <rect x=\"25.4552\" width=\"3.49991\" height=\"35.9991\" rx=\"1.74996\" transform=\"rotate(45 25.4552 0)\"\r\n                  fill=\"#CF0000\"/>\r\n        </svg>;\r\n\r\n        const O = <svg className='little-sign' width=\"29\" height=\"29\" viewBox=\"0 0 29 29\" fill=\"none\"\r\n                       xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path fillRule=\"evenodd\" clipRule=\"evenodd\"\r\n                  d=\"M14.5 29C22.5081 29 29 22.5081 29 14.5C29 6.49187 22.5081 0 14.5 0C6.49187 0 0 6.49187 0 14.5C0\r\n                  22.5081 6.49187 29 14.5 29ZM14.5 25.5C20.5751 25.5 25.5 20.5751 25.5 14.5C25.5 8.42487 20.5751 3.5\r\n                  14.5 3.5C8.42487 3.5 3.5 8.42487 3.5 14.5C3.5 20.5751 8.42487 25.5 14.5 25.5Z\"\r\n                  fill=\"#00B533\"/>\r\n        </svg>;\r\n\r\n        return winner ?\r\n            ((winner === 'X') === this.state[\"firstIsO\"]) ?\r\n                <p className='red'>You lose</p> :\r\n                <p className='green'>You won</p> :\r\n            this.state.stepNumber < 9 ?\r\n                [\r\n                    'Current player:',\r\n                    <div className='little-sign'> {this.state.xIsNext ? X : O} </div>\r\n                ] :\r\n                <span className='blue'>Draw</span>;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        const moves = history.slice(1).map(\r\n            (step, move) => {\r\n                if ((move % 2 === 0) !== this.state['firstIsO']) {\r\n                    let userMove;\r\n                    if (this.state['firstIsO']) userMove = (move + 1) / 2;\r\n                    else userMove = (move + 2) / 2;\r\n                    const desc = 'Move #' + userMove;\r\n                    if (this.state.stepNumber !== move + 1)\r\n                        return (\r\n                            <button key={move} className='move-button' onClick={() => this.jumpTo(move + 1)}>\r\n                                {desc}\r\n                            </button>\r\n                        )\r\n                    else\r\n                        return (\r\n                            <button key={move} className='move-button selected'>\r\n                                {desc}\r\n                            </button>\r\n                        );\r\n                }\r\n            });\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.userClick(i)}\r\n                    />\r\n                </div>\r\n                <LeftMenu\r\n                    changeFirst={() => {\r\n                        this.setState({firstIsO: !this.state[\"firstIsO\"]});\r\n                        if (!this.state.stepNumber) this.jumpTo(0);\r\n                    }}\r\n                    changeMode={() => {\r\n                        this.setState({hardMode: !this.state.hardMode});\r\n                        if (!this.state.stepNumber) this.jumpTo(0);\r\n                    }}\r\n                    firstIsO={this.state[\"firstIsO\"]}\r\n                    hardMode={this.state.hardMode}\r\n                    newGame={() => {\r\n                        this.jumpTo(0)\r\n                    }}\r\n                />\r\n                <div className=\"right\">\r\n                    <h2>Go to the move:</h2>\r\n                    {moves}\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    {this.defineStatus(winner)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game/>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}